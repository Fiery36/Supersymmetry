import globals.Globals

DISTILLERY = recipemap('distillery')
REACTION_FURNACE = recipemap('reaction_furnace')
BR = recipemap('batch_reactor')
ROASTER = recipemap('roaster')

BR.recipeBuilder()
    .inputs(ore('dustYttriumHydroxide') * 7)
    .fluidInputs(fluid('hydrochloric_acid') * 3000)
    .fluidOutputs(fluid('yttrium_chloride_solution') * 6000)
    .duration(80)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

DISTILLERY.recipeBuilder()
    .fluidInputs(fluid('yttrium_chloride_solution') * 6000)
    .outputs(metaitem('dustYttriumChloride') * 4)
    .fluidOutputs(fluid('water') * 6000)
    .duration(80)
    .EUt(Globals.voltAmps[1])
    .buildAndRegister()

REACTION_FURNACE.recipeBuilder()
    .notConsumable(metaitem('crucible.tantalum'))
    .inputs(ore('dustYttriumChloride') * 4)
    .inputs(ore('dustLithium') * 3)
    .fluidInputs(fluid('helium') * 50)
    .outputs(metaitem('dustYttrium'))
    .outputs(metaitem('dustLithiumChloride') * 6)
    .duration(200)
    .EUt(Globals.voltAmps[3] * 2)
    .buildAndRegister()

ROASTER.recipeBuilder()
    .inputs(ore('dustYttriumHydroxide') * 14)
    .outputs(metaitem('dustYttriumOxide') * 5)
    .fluidOutputs(fluid('dense_steam') * 3000)
    .duration(100)
    .EUt(Globals.voltAmps[2])
    .buildAndRegister()